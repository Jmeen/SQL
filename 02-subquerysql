-------
-- subquery
-------
-- 하나의 질의문 안에 다른 질의문을 포함하는 형태.
-- 전체 사원 중 , 급여의 중앙값보다 많이 받는 사원
-- 1. 급여의 중앙값
SELECT median(salary) FROM employees; --  6200
-- 2. 6200 보다 많이 받는 사원 쿼리
SELECT first_name, salary FROM employees WHERE salary>6200;
--3. 두 쿼리를 합쳐보자
SELECT first_name, salary FROM employees 
WHERE salary>(SELECT median(salary) FROM employees);

-- DEN보다 늦게 입사한 사원들
-- 1. den 입사일 쿼리
SELECT hire_date FROM employees WHERE first_name='Den';
-- 2. 특정 날짜 이 후 입사한 사원 쿼리
SELECT first_name, hire_date FROM employees WHERE hire_date>='02/12/07';
-- 3. 두개를 합침
SELECT first_name, hire_date 
FROM employees 
WHERE hire_date >= (SELECT hire_date FROM employees WHERE first_name='Den');

--[연습] hr.employees
-- 급여를 가장 적게 받는 사람의 이름, 급여, 사원 번호를 출력하시오
-- 평균 급여보다 적게 받는 사원의 이름, 급여를 출력해 보세요.


------
-- 다중행 서브쿼리
-- 서브 쿼리의 결과 레코드가 둘 이상이 나올때, 단일행 연산자를 사용할 수 없음.
-- IN, any, ALL, EXISTS 등 집합 연산자를 활용해야 한다.

SELECT salary FROM employees WHERE department_id='110'; -- 2ROW(12008, 8300)

SELECT first_name, salary FROM employees WHERE salary = (SELECT salary FROM employees WHERE department_id='110');  -- ERROR

-- 결과가 다중행이면 집합 연산자를 활용해야 한다.
-- IN : salary =  12008 or salary =  8300
SELECT first_name, salary FROM employees WHERE salary IN (SELECT salary FROM employees WHERE department_id='110'); 

-- ALL(AND) : salary >  12008 and salary >  8300
SELECT first_name, salary FROM employees WHERE salary > ALL (SELECT salary FROM employees WHERE department_id='110'); 

-- ANY(OR) : salary >  12008 or  salary >  8300
SELECT first_name, salary FROM employees WHERE salary > ANY (SELECT salary FROM employees WHERE department_id='110');

-- 각 부서별로 최고 급여를 받는 사원을 출력해보자
--1 . 각 부서 최고 급여 확인 쿼리
Select department_id, MAX(salary) FROM employees
Group by department_id;

--2. 서브쿼리의 결과가(department_id, MAX(salary)) 
SELECT department_id, employee_id, first_name , salary 
FROM employees
WHERE (department_id, salary) IN (Select department_id, MAX(salary) FROM employees
                                    Group by department_id)
ORDER BY department_id;

-- 서브쿼리와 조인
SELECT e.department_id, e.employee_id, e.first_name, e.salary
FROM employees e , (SELECT department_id, MAX(salary) salary FROM employees GROUP BY department_id) sal
WHERE e.department_id = sal.department_id and e.salary = sal.salary
ORDER BY e.department_id;

-- corerelated query
-- 외부 쿼리와 내부 쿼리 연관관계를 맺는 쿼리
SELECT e.department_id, e.employee_id, e.first_name, e.salary
FROM employees e
WHERE e.salary = (SELECT MAX(salary) FROM employees WHERE department_id = e.department_id)
ORDER BY e.department_id;

-- TOP -K Query
-- ROWNUM : 레코드의 순서를 가리키는 가상의 컬럼 (Pseudo)
-- 2007년 입사자 중에서 연봉 순위 5위까지 출력
SELECT rownum,first_name , hire_date
FROM (SELECT * FROM employees WHERE hire_date LIKE '07%' ORDER BY salary desc, first_name)
WHERE rownum<=5;

SELECT * FROM employees WHERE hire_date LIKE '07%' ORDER BY salary desc;

-- 집합 연산 : SET
-- UNION : 합집합, UNION ALL : 합집합, 중복요소 체크 안함
-- INTERSECT : 교집합, 
-- MINUS : 차집함
-- 05년 이전 입사자 쿼리
SELECT first_name, salary, hire_date FROM employees WHERE hire_date < ' 05/01/01';  -- 24
-- 급여가 12000 초과자 쿼리
SELECT first_name, salary, hire_date FROM employees WHERE salary > 12000;  -- 8

-- 합집합
SELECT first_name, salary, hire_date FROM employees WHERE hire_date < ' 05/01/01' 
UNION 
SELECT first_name, salary, hire_date FROM employees WHERE salary > 12000;  -- 26

SELECT first_name, salary, hire_date FROM employees WHERE hire_date < ' 05/01/01' 
UNION ALL  -- 합집합, 중복 허용
SELECT first_name, salary, hire_date FROM employees WHERE salary > 12000;  --32

SELECT first_name, salary, hire_date FROM employees WHERE hire_date < ' 05/01/01' 
INTERSECT  -- 교집합 (AND)
SELECT first_name, salary, hire_date FROM employees WHERE salary > 12000;  -- 6

SELECT first_name, salary, hire_date FROM employees WHERE hire_date < ' 05/01/01' 
minus 
SELECT first_name, salary, hire_date FROM employees WHERE salary > 12000;  --18


--- 순위함수
-- RANK() : 중복 순위가 있으면 건너뛴다.
-- DENSE RANK () : 중복순위 상관없이 다음 순위
-- ROW_MUMBER() : 순위상관없이 차례대로

SELECT salary, first_name, 
    RANK() OVER (ORDER BY salary DESC) rank,
    DENSE_RANK() OVER (ORDER BY salary DESC) dense_rank,
    ROW_NUMBER() OVER (ORDER BY salary DESC) row_number
FROM employees;

-- hierachical query : 계층적 쿼리
-- yree 형태의 구조 추출
-- LEVEL이라는 가상 컬럼이 생긴다.

SELECT LEVEL,employee_id, first_name, manager_id

FROM employees
START With manager_id is null  -- 트리 시작 조건
CONNECT BY PRIOR employee_id=manager_id
ORDER BY level;